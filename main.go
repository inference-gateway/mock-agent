// Code generated by ADL CLI v0.23.9. DO NOT EDIT.
// This file was automatically generated from an ADL (Agent Definition Language) specification.
// Manual changes to this file may be overwritten during regeneration.

package main

import (
	"context"
	"log"
	"os"
	"os/signal"
	"syscall"

	server "github.com/inference-gateway/adk/server"
	envconfig "github.com/sethvargo/go-envconfig"
	zap "go.uber.org/zap"

	config "github.com/inference-gateway/mock-agent/config"
	skills "github.com/inference-gateway/mock-agent/skills"

	logger "github.com/inference-gateway/mock-agent/internal/logger"
	mock "github.com/inference-gateway/mock-agent/internal/mock"
)

var (
	Version          = "0.1.0"
	AgentName        = "mock-agent"
	AgentDescription = "A2A agent server for mocking and testing. Uses a mock LLM client - no API keys required!"
)

func main() {
	ctx := context.Background()

	var cfg config.Config
	if err := envconfig.Process(ctx, &cfg); err != nil {
		log.Fatal("failed to load config:", err)
	}

	// Initialize logger
	l, err := logger.NewLogger(ctx, &cfg)
	if err != nil {
		log.Fatal("failed to initialize logger:", err)
	}

	l.Info("starting " + AgentName + " agent (version: " + Version + ", environment: " + cfg.Environment + ")")

	// Create toolbox with default tools (like input_required, create_artifact etc)
	toolBox := server.NewDefaultToolBox(&cfg.A2A.AgentConfig.ToolBoxConfig)

	// Register echo skill
	echoSkill := skills.NewEchoSkill()
	toolBox.AddTool(echoSkill)
	l.Info("registered skill: echo (Echo back the input message (useful for basic connectivity tests))")

	// Register delay skill
	delaySkill := skills.NewDelaySkill()
	toolBox.AddTool(delaySkill)
	l.Info("registered skill: delay (Simulate slow responses with configurable delays)")

	// Register error skill
	errorSkill := skills.NewErrorSkill()
	toolBox.AddTool(errorSkill)
	l.Info("registered skill: error (Simulate error conditions for testing error handling)")

	// Register random_data skill
	randomDataSkill := skills.NewRandomDataSkill()
	toolBox.AddTool(randomDataSkill)
	l.Info("registered skill: random_data (Generate random test data)")

	// Register validate skill
	validateSkill := skills.NewValidateSkill()
	toolBox.AddTool(validateSkill)
	l.Info("registered skill: validate (Validate input against common patterns)")

	llmClient := mock.NewMockLLMClient()
	l.Info("using mock LLM client (no external API calls)")

	agent, err := server.NewAgentBuilder(l).
		WithConfig(&cfg.A2A.AgentConfig).
		WithLLMClient(llmClient).
		WithToolBox(toolBox).
		WithMaxChatCompletion(cfg.A2A.AgentConfig.MaxChatCompletionIterations).
		WithSystemPrompt(`You are a mock AI assistant designed for testing and development purposes.

You have access to several mock skills that demonstrate different testing scenarios:
- echo: Simply echo back the input message (useful for basic connectivity tests)
- delay: Simulate slow responses with configurable delays
- error: Simulate error conditions for testing error handling
- random_data: Generate random test data
- validate: Validate input against common patterns

When responding:
- Be clear and predictable in your responses
- Include relevant metadata about the request
- Support both streaming and non-streaming modes
- Handle edge cases gracefully

Your purpose is to provide consistent, reproducible responses for testing A2A protocol implementations.
`).
		Build()
	if err != nil {
		l.Fatal("failed to create agent", zap.Error(err))
	}

	artifactService, err := server.NewArtifactService(&cfg.A2A.ArtifactsConfig, l)
	if err != nil {
		l.Warn("artifact service could not be created - check ARTIFACTS_ENABLE environment variable", zap.Error(err))
		l.Info("continuing without artifact service support")
		artifactService = nil
	}

	artifactsServer, err := server.
		NewArtifactsServerBuilder(&cfg.A2A.ArtifactsConfig, l).
		WithArtifactService(artifactService).
		Build()
	if err != nil {
		l.Warn("artifacts server could not be created", zap.Error(err))
		l.Info("continuing without artifacts server")
		artifactsServer = nil
	}

	a2aServer, err := server.NewA2AServerBuilder(cfg.A2A, l).
		WithAgent(agent).
		WithAgentCardFromFile(".well-known/agent-card.json", map[string]any{
			"name":        AgentName,
			"version":     Version,
			"description": AgentDescription,
			"url":         cfg.A2A.AgentURL,
		}).
		WithArtifactService(artifactService).
		WithDefaultBackgroundTaskHandler().
		WithDefaultStreamingTaskHandler().
		Build()
	if err != nil {
		l.Fatal("failed to create A2A server", zap.Error(err))
	}

	go func() {
		l.Info("starting A2A server", zap.String("port", cfg.A2A.ServerConfig.Port))
		if err := a2aServer.Start(ctx); err != nil {
			l.Fatal("server failed to start", zap.Error(err))
		}
	}()

	if artifactsServer != nil {
		go func() {
			l.Info("starting A2A artifacts server", zap.String("port", cfg.A2A.ArtifactsConfig.ServerConfig.Port))
			if err := artifactsServer.Start(ctx); err != nil {
				l.Fatal("artifacts server failed to start", zap.Error(err))
			}
		}()
	}

	l.Info("mock-agent agent running successfully",
		zap.String("port", cfg.A2A.ServerConfig.Port),
		zap.String("environment", cfg.Environment))

	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit

	l.Info("shutdown signal received, gracefully stopping server...")
	a2aServer.Stop(ctx)
	if artifactsServer != nil {
		artifactsServer.Stop(ctx)
	}
	l.Info("mock-agent agent stopped")
}
